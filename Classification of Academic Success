{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73290,"databundleVersionId":8710574,"sourceType":"competition"}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-29T14:58:50.410029Z","iopub.execute_input":"2024-06-29T14:58:50.410514Z","iopub.status.idle":"2024-06-29T14:58:51.671415Z","shell.execute_reply.started":"2024-06-29T14:58:50.410475Z","shell.execute_reply":"2024-06-29T14:58:51.670305Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e6/sample_submission.csv\n/kaggle/input/playground-series-s4e6/train.csv\n/kaggle/input/playground-series-s4e6/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"folder = \"/kaggle/input/playground-series-s4e6\"","metadata":{"execution":{"iopub.status.busy":"2024-06-28T11:42:09.499310Z","iopub.execute_input":"2024-06-28T11:42:09.499733Z","iopub.status.idle":"2024-06-28T11:42:09.505246Z","shell.execute_reply.started":"2024-06-28T11:42:09.499698Z","shell.execute_reply":"2024-06-28T11:42:09.503546Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import RFE\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom imblearn.over_sampling import SMOTE\nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\n\n# Load data\ntrain_df = pd.read_csv(f'{folder}/train.csv')\ntest_df = pd.read_csv(f'{folder}/test.csv')\n\n# Separate features and target\nX = train_df.drop(['id', 'Target'], axis=1)\ny = train_df['Target']\n\n# Split the data\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Identify numeric and categorical columns\nnumeric_features = X.select_dtypes(include=['int64', 'float64']).columns\ncategorical_features = X.select_dtypes(include=['object']).columns\n\n# Preprocessing\nnumeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())\n])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)\n    ])\n\n# Feature Selection\nselector = RFE(estimator=RandomForestClassifier(n_estimators=100, random_state=42), n_features_to_select=20)\n\n# Model\nmodel = XGBClassifier(\n    tree_method='hist',\n    device=\"cuda\",\n    random_state=42\n    )\n\n# Create pipeline\npipeline = Pipeline([\n    ('preprocessor', preprocessor),\n    ('selector', selector),\n    ('model', model)\n])\n\n# Hyperparameter tuning\nparam_grid = {\n    'model__n_estimators': [100, 200, 300],\n    'model__max_depth': [3, 4, 5],\n    'model__learning_rate': [0.01, 0.1, 0.3]\n}\n\ngrid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='accuracy', n_jobs=-1)\n\n# Handle class imbalance\nsmote = SMOTE(random_state=42)\nX_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n\n# Fit the model\ngrid_search.fit(X_train_resampled, y_train_resampled)\n\n# Make predictions\ny_pred = grid_search.predict(X_val)\n\n# Evaluate the model\nprint(\"Best parameters:\", grid_search.best_params_)\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_val, y_pred))\nprint(f\"\\nAccuracy: {accuracy_score(y_val, y_pred)}\")\n\n# Feature importance\nfeature_importance = grid_search.best_estimator_.named_steps['selector'].support_\nselected_features = X.columns[feature_importance]\nprint(\"\\nSelected Features:\", selected_features)\n\n# Predict on test set\ntest_predictions = grid_search.predict(test_df.drop('id', axis=1))\n\n# Create submission file\nsubmission = pd.DataFrame({'id': test_df['id'], 'Target': test_predictions})\nsubmission.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T11:42:10.830323Z","iopub.execute_input":"2024-06-28T11:42:10.830767Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}